{"version":3,"sources":["db/firestore.js","pages/TodoList/ListItem.js","pages/TodoList/index.js","App.js","serviceWorker.js","index.js"],"names":["require","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","ListItem","data","deleteTodo","updateTodo","React","useState","edit","setEdit","modify","setModify","name","city","type","onChange","e","email","target","value","onClick","id","TodoList","formRef","useRef","cafeDatas","setCafeDatas","getTodo","fetch","then","res","json","console","log","status_code","results","useEffect","method","onSubmit","preventDefault","current","some","toLowerCase","trim","select","ref","placeholder","selected","map","dataIdx","App","className","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3ddfafa0.chunk.js","sourcesContent":["import firebase from \"firebase\";\nrequire(\"firebase/firestore\");\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDe3e6dYEf84hwPVYDn-9MXq2vYCz7tVHQ\",\n  authDomain: \"test-6d8f0.firebaseapp.com\",\n  databaseURL: \"https://test-6d8f0.firebaseio.com\",\n  projectId: \"test-6d8f0\",\n  storageBucket: \"test-6d8f0.appspot.com\",\n  messagingSenderId: \"37179573805\",\n  appId: \"1:37179573805:web:3bc1c1685e08c82c9f1aa4\",\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\nexport default db;\n","import React from \"react\";\nconst ListItem = ({ data, deleteTodo, updateTodo }) => {\n  const [edit, setEdit] = React.useState(false);\n  const [modify, setModify] = React.useState(data);\n  return (\n    <li>\n      <span>{data.name}</span>-<span>{data.city}</span>-\n      <span>\n        {edit ? (\n          <input\n            type=\"text\"\n            name=\"email\"\n            onChange={(e) => {\n              setModify({ ...modify, email: e.target.value });\n            }}\n          />\n        ) : (\n          data.email\n        )}\n      </span>\n      <button\n        onClick={() => {\n          setEdit(true);\n        }}\n      >\n        編輯\n      </button>\n      <button\n        onClick={() => {\n          updateTodo(data.id, modify);\n          setEdit(false);\n        }}\n      >\n        確定\n      </button>\n      <button\n        onClick={() => {\n          deleteTodo(data.id);\n        }}\n      >\n        x\n      </button>\n    </li>\n  );\n};\n\nexport default ListItem;\n","import React from \"react\";\nimport db from \"../../db/firestore\";\nimport ListItem from \"./ListItem\";\nconst TodoList = () => {\n  const formRef = React.useRef();\n  const [cafeDatas, setCafeDatas] = React.useState([]);\n\n  const watchTodo = () => {\n    db.collection(\"cafes\")\n      .orderBy(\"name\")\n      .onSnapshot((snapshot) => {\n        let changes = snapshot.docChanges();\n        changes.forEach((change) => {\n          if (change.type === \"modified\") {\n            console.log(\"Modified city: \", change.doc.data());\n            console.log(change.doc.id);\n            setCafeDatas((prevState) => [\n              ...prevState,\n              {\n                ...change.doc.data(),\n                id: change.doc.id, //document id\n              },\n            ]);\n          }\n        });\n      });\n  };\n  const getTodo = () => {\n    fetch(\"/api/list\")\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        if (json.status_code === 1) {\n          setCafeDatas(json.results);\n        }\n      });\n  };\n\n  React.useEffect(() => {\n    getTodo();\n  }, []);\n\n  const addTodo = (e) => {\n    e.preventDefault();\n    const { name, email, city } = formRef.current;\n    if (formRef.current.name.value === \"\") return false;\n    const isDuplicateName = cafeDatas.some(\n      (data) =>\n        data.name.toLowerCase().trim() ===\n        formRef.current.name.value.toLowerCase().trim()\n    );\n    if (!isDuplicateName) {\n      fetch(\n        `/api/list?city=${formRef.current.select.value}&name=${formRef.current.name.value}&email=${formRef.current.email.value}`,\n        {\n          method: \"POST\",\n        }\n      )\n        .then((res) => res.json())\n        .then((json) => {\n          console.log(json);\n          if (json.status_code === 1) {\n            getTodo();\n          }\n        });\n      formRef.current.name.value = \"\";\n      formRef.current.select.value = \"Taiwan\";\n    } else {\n      console.log(\"帳號已存在\");\n    }\n  };\n\n  const deleteTodo = (id) => {\n    fetch(`/api/list?id=${id}`, {\n      method: \"DELETE\",\n    })\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        if (json.status_code === 1) {\n          getTodo();\n        }\n      });\n  };\n\n  const updateTodo = (id, data) => {\n    //   db.collection(\"cafes\").doc(id).update(data);\n    fetch(\n      `/api/list?id=${id}&name=${data.name}&email=${data.email}&city=${data.city}`,\n      {\n        method: \"PUT\",\n      }\n    )\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        if (json.status_code === 1) {\n          getTodo();\n        }\n      });\n  };\n  return (\n    <div>\n      <form onSubmit={addTodo} ref={formRef}>\n        <input type=\"text\" name=\"name\" placeholder=\"name\" />\n        <input type=\"text\" name=\"email\" placeholder=\"email\" />\n        <select name=\"select\">\n          <option selected>Taiwan</option>\n          <option>America</option>\n        </select>\n        <button type=\"submit\">送出</button>\n      </form>\n      <ul>\n        {cafeDatas &&\n          cafeDatas.map((data, dataIdx) => {\n            return (\n              <ListItem\n                data={data}\n                deleteTodo={deleteTodo}\n                updateTodo={updateTodo}\n              />\n            );\n          })}\n      </ul>\n    </div>\n  );\n};\nexport default TodoList;\n","import React from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport TodoList from \"./pages/TodoList\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\">\n          <TodoList />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}